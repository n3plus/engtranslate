1.1 시작하기 - 버전관리란?

This chapter will be about getting started with Git.
이장에서는 Git을 시작하는 방법에 대해 설명합니다.

We will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.
버전 제어 도구에 대한 몇가지 배경 설명으로 시작한다음 시스템에서 Git을 실행하는 방법과 마지막으로 작업을 시작하도록 설정하는 방법으로 이동합니다. 

At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so.
이장의 끝에서 Git이 왜 존재하는지, 왜 그것을 사용해야 하는지, 그리고 그렇게 하도록 모든 설정을 해야 하는지 이해해야 합니다. 

About Version Control - 버전관리 정보
What is “version control”, and why should you care?
“버전관리"란 무엇이며 왜 주의해야 합니까?

version control is a system that records changes to a file or set of files over time so that you can recall specific version later.
버전 제어는 나중에 특정 버전을 불러올 수 있도록 시간 경과에 따른 파일 또는 파일 세트의 변경사항을 기록하는 시스템입니다. 

For the examples in this book, 
you will use software source code as the files begin version controlled, though in reality you can do this with nearly any type of file on a computer.
이책의 예제에서는 소프트웨어 소스 코드를 버전 제어되는 파일로 사용하지만 실제로는 컴퓨터에 있는 거의 모든 유형의 파일에 대해 이 작업을 수행할수 있습니다. 

if you are a graphic or web designer and want to keep every version of an image or layout(which you would most certainly want to), a Version Control System(VCS) is a very wise thing to use.
그래픽 또는 웹디자이너이고 이미지나 레이아웃의 모든 버전(가장 확실히 원할 것)을 유지하려는 경우 버전제어시스템를 사용하는 것이 매우 현명합니다. 

It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when , and more.
이를 통해 선택한 파일을 이전 상태로 되돌리고, 전체 프로젝트를 이전 상태로 되돌리고, 시간 경과에 따른 변경 사항을 비교하고, 문제를 일으킬 수 있는 것을 마지막으로 수정한 사람, 문제를 도입한 사람 및 시기 등을 확인할수 있습니다. 

Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
VCS를 사용한다는 것은 일반적으로 문제를 망치거나 파일을 분실한 경우에도 쉽게 복구 할수 있음을 의미합니다.

In addition, you get all this for very little overhead.
또한 매우 적은 오버헤드로 이 모든것을 얻을수 있습니다. 

Local Version Control System
Many People’s version-control method of choice is to copy files into another directory(perhaps a time stamped directory, if they’re clever).
많은 사람들이 선택하는 버전 제어 방법은 파일을 다른 디렉토리(영리한 경우 타임스탬프가 있는 디렉토리)에 복사하는 것입니다. 

This approach is very common because it is so simple, but it is also incredibly error prone. 
이 접근방식은 매우 간단하기 때문에 매우 일반적이지만 오류가 발생하기 쉽습니다. 

It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to.
어떤 디렉토리에 있는지 잊어버리기 쉽고 실수로 잘못된 파일에 쓰거나 의도하지 않은 파일을 복사합니다. 

To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.
이문제를 해결하기 위해 프로그래머는 오래 전에 파일에 대한 모든 변경 사항을 개정 제어 하에 보관하는 간단한 데이터베이스가 있는 로컬  VCS를 개발했습니다. 

Figure 1. Local Version Control
그림1 로컬 버전 관리

One of the most popular VCS tools was a system called RCS, which is still distributed with may computers today.
가장 인기 있는 VCS 도구 중 하나는 RCS라는 시스템으로 오늘날에도 여전히 많은 컴퓨터에 배포됩니다. 

RCS works by keeping patch sets (that is, the differences between files) in a special format on disk;
RCS는 패치 세트(즉, 파일 간의 차이점)을 디스크의 특수 형식으로 유지하여 작동합니다. 

it can then re-create what any file looked like at any point in time by adding up all the patches.
그럼 다음 모든 패치를 추가하여 언제든지 파일이 어떻게 생겼는지 다시 만들수 있습니다. 

Centralized version control systems
중앙집중형 버전관리 시스템

The next major issue that pepole encounter is that they need to collaborate with developers on other systems.
사람들이 직면하는 다음 주요 문제는 다른 시스템의 개발자와 협업해야 한다는 것입니다. 

Centralized version control systems (CVCSs) were developed.
이 문제를 해결하기 위해 중앙 집중식 버전 제어시스템이 개발되었습니다. 

these systems (such as VCS, subversion, and perforce) have a single server that contains all the versioned files, and a number of clients that check out files form that central place.
이러한 시스템에는 버전이 지정된 모든 파일이 포함된 단일 서버와 해당 중앙 위치에서 파일을 체크아웃하는 여러 클라이언트가 있습니다. 

For many years, this has been the standard for version control
수년동안 이것은 버전 제어의 표준이었습니다. 

Figure 2. Centralized version control.
그림 2 중앙 집중식 버전관리

This setup offers many advantages, especially over local VCSs.
이설정은 특히 로컬 VCS에 비해 많은 이점을 제공합니다. 

For example, everyone knows to a certain degree what everyone else on the project is doing.
예를 들어, 모든 사람은 프로젝트의 다른 모든 사람이 무엇을 하고 있는지 어느 정도 알고 있습니다. 

Administrators have fine-grained control over who can do what, and it’s far easier to administer a CVCS than it is to deal with local database on every client.
관리자는 누가 무엇을 할 수 있는지 세부적으로 제어할수 있으며 모든 클라이언트의 로컬 데이터베이스를 처리하는 것보다 CVCS를 관리하는 것이 훨씬 쉽습니다. 

However, this setup also has some serious downsides.
그러나 이설정에는 몇가지 심각한 단점도 있습니다. 

The most obvious is the single point of failure that the centralized server represents.
가장 분명한 것은 중앙 집중식 서버가 나타내는 단일 실패 지점입니다. 

If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to to anything they’re working on.
해당 서버가 한 시간동안 다운 되면 그시간동안 아무도 공동작업을 하거나 작업중인 모든 항목에 버전이 지정된 변경사항을 저장할수 없습니다. 

If the hard disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything  the entire history of the project except whatever single snapshots people happen to have on their local machines.
중앙 데이터베이스가 있는 하드 디스크가 손상되고, 적절한 백업이 유지되지 않으면 사람들이 로컬 컴퓨터에 가지고 있는 단일 스냅샵을 제외하고 프로젝트의 전체 기록을 완전히 잃게 됩니다. 

Local VCSs suffer form this same problem whenever you have the entire history of the project in a single place, you risk losing everything.
로컬 VCS도 이와 동일한 문제를 겪고 있습니다. 프로젝트의 전체 기록이 한 곳에 있을때마다 모든 것을 잃을 위험이 있습니다.  

Distributed Version Control Systems
분산 버전 관리 시스템

This is where Distributed Version Control Systems (DVCSs) step in.
여기에서 DVCS( 분산 버전 제어 시스템)가 시작됩니다. 

In a DVCS, clients don’t just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
DVCS에서 클라이언트는 파일의 최신 스냅샷을 체크아웃하지 않습니다. 오히려 전체 기록을 포함하여 저장소를 완전히 미러링 합니다. 

Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it. 
따라서 서버가 죽고 이러한 시스템이 해당 서버를 통해 협업하는 경우 클라이언트 저장소를 서버에 복사하여 복원할수 있습니다. 

Every clone is really a full backup of all the data
모든 클론은 실제로 모든 데이터의 전체 백업입니다. 

figure 3 Distributed Version control Systems
Furthemore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project 
또한, 이러한 시스템중 다수는 작업할수 있는 여러 원격 리포지토리를 매우 잘 처리하므로 동일한 프로젝트 내에서 동시에 다른방식으로 다른 그룹의 사람들과 협업할수 있습니다. 

This allows you to set up several types of workflows that aren’t possible in centralized systems, such as hierarchical models
이를 통해 계층적 모델과 같은 중앙 집중식 시스템에서는 불가능한 여러 유형의 워크플로우를 설정할수 있습니다. 

